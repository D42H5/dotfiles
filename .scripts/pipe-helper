#!/bin/bash

getVolume() {
	val=`pactl get-$2-volume @DEFAULT_$1@ | awk '{ print $5 }' | sed 's/%//' | tr -d '[:space:]'`
	#percent=`bc <<< "$val*100" | sed 's/\.00//'`
	echo $val
}

determineTooltip() {
	if [[ $1 -ge 75 ]]
	then
		echo "75%"
	elif [[ $1 -ge 50 ]]
	then
		echo "50%"
	elif [[ $1 -ge 25 ]]
	then
		echo "25%"
	else
		echo "0%"
	fi
}

checkMuted() {
	mute="`pactl get-$2-mute @DEFAULT_$1@ | grep no`" 
	# Probably some bash-ism I'm missing here, but the 
	# logic works as meant to... even though it's checking 
	# against a non-null string and passing as true
	# when it should be passing as false...
	# TL:DR - grep no == yes

	if [ -n "$mute" ]
	then
		return 1
	else
		return 0
	fi
}

outputNormalJSON() {
	printf '{"percentage":%d}' $1
}

outputMutedJSON() {
	printf '{"alt":"mute", "tooltip":"muted", "class":"muted"}'
}

getStatus() {
	if $(checkMuted $1 $2)
	then
		echo $(outputMutedJSON)
	else
		vol="$(getVolume $1 $2)"
		echo $(outputNormalJSON $vol)
	fi
}

increaseVolume() {
	cur_vol="$(getVolume $1 $2)"
	new_vol=`expr "$cur_vol" + "$3"`
	if [ "$new_vol" -gt "$4" ]; then
		new_vol=`expr "$4"`
	fi
	pactl set-$2-volume @DEFAULT_$1@ $new_vol%
}

decreaseVolume() {
	cur_vol="$(getVolume $1 $2)"
	new_vol=`expr "$cur_vol" - "$3"`
	if [ "$new_vol" -lt 0 ]; then
		new_vol=0
	fi
	pactl set-$2-volume @DEFAULT_$1@ $new_vol%
}

muteAudio() {
	wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
}

muteMic() {
	wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
}

getAudioVolume() {
	echo `wpctl get-volume @DEFAULT_AUDIO_SINK@`
}

############################################################################
# MAIN CODE
############################################################################

unset -v REF
unset -v vol_change
unset -v vol_limit
unset -v do_get_status
unset -v do_mute_toggle
unset -v do_increase_vol
unset -v do_decrease_vol

# Handle options
while getopts ":sr:i:d:l:m" arg; do
	case $arg in
		r)
			REF="${OPTARG}"
			;;
		s)
			do_get_status=1
			;;
		i)
			vol_change=${OPTARG}
			do_increase_vol=1
			;;
		d)
			vol_change=${OPTARG}
			do_decrease_vol=1
			;;
		l)
			vol_limit=${OPTARG}
			;;
		m)
			do_mute_toggle=1
			;;
		*)
			echo "Unknown flag $arg"
			exit
			;;
	esac
done

# Check to make sure a ref was given
: ${REF:?Missing audio reference, please specify with -r}

# Convert REF to lowercase for utility in a few places
ref=`echo $REF | tr '[:upper:]' '[:lower:]'`

if [ -n "$do_get_status" ]; then
	# Get the status
	getStatus $REF $ref

elif [ -n "$do_increase_vol" ]; then
	# Increase the volme
	if [ -n "$vol_limit" ]; then
		increaseVolume $REF $ref $vol_change $vol_limit
	else
		increaseVolume $REF $ref $vol_change 100
	fi

elif [ -n "$do_decrease_vol" ]; then
	# Decerase the volume
	decreaseVolume $REF $ref $vol_change

elif [ -n "$do_mute_toggle" ]; then
	# Toggle mute
	pactl set-$ref-mute @DEFAULT_$REF@ toggle

else
	echo "No valid functional purpose specified."
	echo "Please use one of the following options: s, i, d, or m"
	exit
fi
